#! /usr/bin/python3
# Copyright (c) 2020, Keita Kitaura
# All rights reserved.
#
# $Id: $
#

from mendeley import Mendeley
from mendeley.session import MendeleySession
import yaml
import os
import re
import requests
import sys
from perlcompat import getopts,die
# ref: https://stackoverflow.com/questions/47777288/authentication-issue-in-mendeley-python-sdk

def download_paper(group,p_id,p_dir):
    "group内の p_id を持つ文献を pdf ファイルとして p_dir ディレクトリに追加"    
    for doc in group.documents.iter():
        if doc.id == p_id:
            print(doc.title, doc.id)
    return 0
    
def add_pdf_file(group,path):
    group.documents.create_from_file(path)
    
    return 0

def add_all_pdf(session,dirc,group,):
    "dirc ディレクトリ内の pdf ファイルを全て group のドキュメントに追加"
    return 0

def search_from_years(group,years):
    y_list = years.split(',')
    y_min = int(y_list[0])
    y_max = int(y_list[1])
    count = 0
    "group内のy_min 年から y_max 年までの ドキュメントを表示"
    for doc in group.documents.iter():
        if int(doc.year) >= y_min and int(doc.year) <= y_max:
            print(doc.title,doc.year,doc.id)
            count = count + 1
            
    if count == 0:    
        print(f"{group.name} does not have any papers from {y_min} to {y_max}.")

    return 0

def search_from_words(group,word):
    "group 内にあるタイトルに word を含むドキュメントを探索"
    count = 0
    for doc in group.documents.iter():
        if re.search(word,doc.title) != None:
            print(doc.title,doc.year)
            count = count + 1
    if count == 0:
        print(f"{group.name} does not have {word}")

    return 0

def list_doc(group):
    " group 内にあるドキュメントの一覧を表示"
    for doc in group.documents.iter():
        print(doc.title, doc.year)
    return 0

def search_config(f_name):
    "config ファイルの中から情報を取得"
    "以下で登録http://dev.mendeley.com/"
    config = {}
    if os.path.isfile(f_name): 
        with open(f_name) as f:
            f_lines = f.readlines()
            for line in f_lines:
                content = line.split(':')
                config[content[0]] = re.findall(r'{(.*?)}',content[1])[0]
    else:
        print("Please make config file(conifg.txt)")
    return config

def usage():
    die("""\
usage: {} [-l] [-w word] [-y min,max]
  -l Show all of papers in your group library
  -w Show the papers whose title has "word" 
  -y Show the papers published from "min" to "max" 
  # -u Upload "path" file to your group library
""".format(sys.argv[0]))


def main():
    opt = getopts('lw:y:') or usage()
    title = opt.w if opt.w else "none"
    years = opt.y if opt.y else '2020,2020'
    # path = opt.u if opt.u else 'none'

    # print(path)
    config = search_config('config.txt')
    redirect_url = "http://localhost:8000/testing"
    
    # mendeley = Mendeley(client_id,client_secret,redirect_uri=redirect_url)
    mendeley = Mendeley(config['clientId'],config['clientSecret'],redirect_uri=redirect_url)

    auth = mendeley.start_implicit_grant_flow()
    login_url = auth.get_login_url()

    res = requests.post(login_url,allow_redirects = False, data = {
        'username': config['user'],
        'password': config['pass']
    })    
    auth_response = res.headers['Location']
    
    session = auth.authenticate(auth_response)

    for gr in session.groups.iter():
        print(gr.name)
        if gr.name == config['group']:
            group_id = gr.id
            
    group = session.groups.get(group_id)

    # session.documents.create_from_file(path)

    if opt.l:
        list_doc(group)
    elif opt.y:
        search_from_years(group,years)
    elif opt.w:
        search_from_words(group,title)
    # elif path != "none":
    #     add_pdf_file(group,path)        
    else:
        list_doc(group)            

if __name__ == "__main__":
    main()
